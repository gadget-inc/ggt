// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`root > when deploy is given > prints the usage when --help is passed 1`] = `
"Deploy a development environment to production.

Deploy ensures your directory is in sync with your current 
development environment and that it is in a deployable state. If there are any
issues, it will display them and ask if you would like to deploy
anyways.

USAGE
  ggt deploy [DIRECTORY] [--app=<name>] [--environment=<name>] [--prefer=<filesystem>] [--force]

EXAMPLES

  $ ggt deploy
  $ ggt deploy ~/gadget/example
  $ ggt deploy ~/gadget/example --app=example
  $ ggt deploy ~/gadget/example --app=example --environment=development
  $ ggt deploy ~/gadget/example --app=example --environment=development --prefer=local
  $ ggt deploy ~/gadget/example --app=example --environment=development --prefer=local --force

ARGUMENTS

  DIRECTORY
    The path to the directory to sync your development environment's
    files to before deploying it to your production environment.
    The directory will be created if it does not exist.

    Defaults to the current working directory. (default: \\".\\")

FLAGS

  -a, --app=<name>
    The Gadget application to deploy.

    If not provided, the application will be inferred from the
    \\".gadget/sync.json\\" file in the chosen directory or any of its
    parent directories.

    If a \\".gadget/sync.json\\" file is not found, you will be
    prompted to choose an application from your list of apps.

  -e, --environment=<name>
    The environment to deploy from.

    If not provided, the environment will be inferred from the
    \\".gadget/sync.json\\" file in the chosen directory or any of its
    parent directories.

    If a \\".gadget/sync.json\\" file is not found, you will be
    prompted to choose an environment from your list of environments.

  --prefer=<filesystem>
    Which filesystem's changes to automatically keep when
    conflicting changes are detected.

    If not provided, deploy will pause when conflicting changes are
    detected and you will be prompted to choose which changes to
    keep before deploy resumes.

    Must be one of \\"local\\" or \\"gadget\\".

  --force
    Deploy your development environment to production regardless
    of any issues it may have.

    These issues may include:
      • Syntax errors
      • TypeScript errors
      • Missing fields that should be present on models
"
`;

exports[`root > when deploy is given > prints the usage when -h is passed 1`] = `
"Deploy a development environment to production.

USAGE
  ggt deploy [DIRECTORY]

ARGUMENTS
  DIRECTORY         The directory to sync files from and deploy (default: \\".\\")

EXAMPLES
  $ ggt deploy
  $ ggt deploy ~/gadget/example
  $ ggt deploy ~/gadget/example --app=example
  $ ggt deploy ~/gadget/example --app=example --environment=development
  $ ggt deploy ~/gadget/example --app=example --environment=development --prefer=local

FLAGS
  -a, --app=<name>           The Gadget application to deploy
  -e, --environment=<name>   The environment to deploy from
      --prefer=<filesystem>  Prefer \\"local\\" or \\"gadget\\" conflicting changes
      --force                Deploy regardless of any issues found

Run \\"ggt deploy --help\\" for more information.
"
`;

exports[`root > when list is given > prints the usage when --help is passed 1`] = `
"List the apps available to the currently logged in user.

USAGE
  ggt list

EXAMPLES
  $ ggt list
"
`;

exports[`root > when list is given > prints the usage when -h is passed 1`] = `
"List the apps available to the currently logged in user.

USAGE
  ggt list

EXAMPLES
  $ ggt list
"
`;

exports[`root > when login is given > prints the usage when --help is passed 1`] = `
"Log in to your account.

USAGE
  ggt login

EXAMPLES
  $ ggt login
"
`;

exports[`root > when login is given > prints the usage when -h is passed 1`] = `
"Log in to your account.

USAGE
  ggt login

EXAMPLES
  $ ggt login
"
`;

exports[`root > when logout is given > prints the usage when --help is passed 1`] = `
"Log out of your account.

USAGE
  ggt logout

EXAMPLES
  $ ggt logout
"
`;

exports[`root > when logout is given > prints the usage when -h is passed 1`] = `
"Log out of your account.

USAGE
  ggt logout

EXAMPLES
  $ ggt logout
"
`;

exports[`root > when sync is given > prints the usage when --help is passed 1`] = `
"Sync your local filesystem with your Gadget environment's
filesystem in real-time.

While ggt sync is running, local file changes are immediately
reflected within Gadget, while files that are changed in Gadget are
immediately saved to your local filesystem.

Ideal for:
  • Local development with editors like VSCode
  • Storing source code in a Git repository like GitHub

Sync looks for a \\".ignore\\" file to exclude files and directories
from being synced. The format is identical to Git's.

These files are always ignored:
  • .DS_Store
  • .gadget
  • .git
  • node_modules

Note:
  • Sync only works with your development environment
  • Avoid deleting or moving all your files while sync is running
  • Gadget only supports Yarn v1 for dependency installation

https://docs.gadget.dev/guides/development-tools/cli#filesync

USAGE

  ggt sync [DIRECTORY] [--app=<name>] [--prefer=<filesystem>] [--once] [--force]

EXAMPLES

  $ ggt sync
  $ ggt sync ~/gadget/example
  $ ggt sync ~/gadget/example --app=example
  $ ggt sync ~/gadget/example --app=example --prefer=local --once
  $ ggt sync ~/gadget/example --app=example --prefer=local --once --force

ARGUMENTS

  DIRECTORY
    The path to the directory to sync files to. The directory will
    be created if it does not exist.

    Defaults to the current working directory. (default: \\".\\")

FLAGS

  -a, --app=<name>
    The Gadget application to sync files to.

    If not provided, the application will be inferred from the
    \\".gadget/sync.json\\" file in the chosen directory or any of its
    parent directories.

    If a \\".gadget/sync.json\\" file is not found, you will be
    prompted to choose an application from your list of apps.

  --prefer=<filesystem>
    Which filesystem's changes to automatically keep when
    conflicting changes are detected.

    If not provided, sync will pause when conflicting changes are
    detected and you will be prompted to choose which changes to
    keep before sync resumes.

    Must be one of \\"local\\" or \\"gadget\\".

  --once
    When provided, sync will merge the changes from Gadget with
    the changes from your local filesystem like it does when
    started normally, but will then exit instead of continuing to
    watch for changes.

    Defaults to false.

  --force
    When provided, sync will run regardless of the state of the
    local filesystem.
"
`;

exports[`root > when sync is given > prints the usage when -h is passed 1`] = `
"Sync your local filesystem with your Gadget environment's
filesystem in real-time.

https://docs.gadget.dev/guides/development-tools/cli#filesync

USAGE
  ggt sync [DIRECTORY]

EXAMPLES
  $ ggt sync
  $ ggt sync ~/gadget/example
  $ ggt sync ~/gadget/example --app=example
  $ ggt sync ~/gadget/example --app=example --prefer=local --once

ARGUMENTS
  DIRECTORY                  The directory to sync files to (default: \\".\\")

FLAGS
  -a, --app=<name>           The Gadget application to sync files to
      --prefer=<filesystem>  Prefer \\"local\\" or \\"gadget\\" conflicting changes
      --once                 Sync once and exit
      --force                Sync regardless of local filesystem state

  Run \\"ggt sync --help\\" for more information.
"
`;

exports[`root > when version is given > prints the usage when --help is passed 1`] = `
"Print the current version of ggt.

USAGE
  ggt version

EXAMPLES
  $ ggt version
"
`;

exports[`root > when version is given > prints the usage when -h is passed 1`] = `
"Print the current version of ggt.

USAGE
  ggt version

EXAMPLES
  $ ggt version
"
`;

exports[`root > when whoami is given > prints the usage when --help is passed 1`] = `
"Show the name and email address of the currently logged in user.

USAGE
  ggt whoami

EXAMPLES
  $ ggt whoami
"
`;

exports[`root > when whoami is given > prints the usage when -h is passed 1`] = `
"Show the name and email address of the currently logged in user.

USAGE
  ggt whoami

EXAMPLES
  $ ggt whoami
"
`;
