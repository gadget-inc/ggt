// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`root > when list is given > prints the usage when --help is passed 1`] = `
"List the apps available to the currently logged in user.

USAGE
  ggt list

EXAMPLE
  $ ggt list
    Slug    Domain
    ─────── ──────────────────
    my-app  my-app.gadget.app
    example example.gadget.app
    test    test.gadget.app
"
`;

exports[`root > when list is given > prints the usage when -h is passed 1`] = `
"List the apps available to the currently logged in user.

USAGE
  ggt list

EXAMPLE
  $ ggt list
    Slug    Domain
    ─────── ──────────────────
    my-app  my-app.gadget.app
    example example.gadget.app
    test    test.gadget.app
"
`;

exports[`root > when login is given > prints the usage when --help is passed 1`] = `
"Log in to your account.

USAGE
  ggt login

EXAMPLES
  $ ggt login
    We've opened Gadget's login page using your default browser.

    Please log in and then return to this terminal.

    Hello, Jane Doe (jane@example.com)
"
`;

exports[`root > when login is given > prints the usage when -h is passed 1`] = `
"Log in to your account.

USAGE
  ggt login

EXAMPLES
  $ ggt login
    We've opened Gadget's login page using your default browser.

    Please log in and then return to this terminal.

    Hello, Jane Doe (jane@example.com)
"
`;

exports[`root > when logout is given > prints the usage when --help is passed 1`] = `
"Log out of your account.

USAGE
  ggt logout

EXAMPLES
  $ ggt logout
    Goodbye
"
`;

exports[`root > when logout is given > prints the usage when -h is passed 1`] = `
"Log out of your account.

USAGE
  ggt logout

EXAMPLES
  $ ggt logout
    Goodbye
"
`;

exports[`root > when sync is given > prints the usage when --help is passed 1`] = `
"Sync your Gadget environment's source code with your local filesystem.

USAGE
  ggt sync [DIRECTORY]

ARGUMENTS
  DIRECTORY                  The directory to sync files to (default: \\".\\")

FLAGS
  -a, --app=<name>           The Gadget application to sync files to
      --prefer=<filesystem>  Prefer \\"local\\" or \\"gadget\\" conflicting changes
      --once                 Sync once and exit
      --force                Sync regardless of local filesystem state

DESCRIPTION
  Sync allows you to synchronize your Gadget application's source
  code with your local filesystem.

  While ggt sync is running, local file changes are immediately
  reflected within Gadget, while files that are changed in Gadget are
  immediately saved to your local filesystem.

  Ideal for:
    • Local development with editors like VSCode
    • Storing source code in a Git repository like GitHub

  Sync looks for a \\".ignore\\" file to exclude certain files/directories
  from being synced. The format is identical to Git's.

  These files are always ignored:
    • .DS_Store
    • .gadget
    • .git
    • node_modules

  Note:
    • Sync only works with your development environment
    • Avoid deleting/moving all your files while sync is running
    • Gadget only supports Yarn v1 for dependency installation

EXAMPLE
  $ ggt sync ~/gadget/example --app example

    App         example
    Editor      https://example.gadget.app/edit
    Playground  https://example.gadget.app/api/graphql/playground
    Docs        https://docs.gadget.dev/api/example

    Endpoints
      • https://example.gadget.app
      • https://example--development.gadget.app

    Watching for file changes... Press Ctrl+C to stop

    → Sent 09:06:25 AM
    routes/GET-hello.js  + created

    → Sent 09:06:49 AM
    routes/GET-hello.js  ± updated

    ← Received 09:06:54 AM
    routes/GET-hello.js  ± updated

    ← Received 09:06:56 AM
    routes/GET-hello.js  - deleted
    ^C Stopping... press Ctrl+C again to force

    Goodbye!
"
`;

exports[`root > when sync is given > prints the usage when -h is passed 1`] = `
"Sync your Gadget environment's source code with your local filesystem.

USAGE
  ggt sync [DIRECTORY]

ARGUMENTS
  DIRECTORY                  The directory to sync files to (default: \\".\\")

FLAGS
  -a, --app=<name>           The Gadget application to sync files to
      --prefer=<filesystem>  Prefer \\"local\\" or \\"gadget\\" conflicting changes
      --once                 Sync once and exit
      --force                Sync regardless of local filesystem state

DESCRIPTION
  Sync allows you to synchronize your Gadget application's source
  code with your local filesystem.

  While ggt sync is running, local file changes are immediately
  reflected within Gadget, while files that are changed in Gadget are
  immediately saved to your local filesystem.

  Ideal for:
    • Local development with editors like VSCode
    • Storing source code in a Git repository like GitHub

  Sync looks for a \\".ignore\\" file to exclude certain files/directories
  from being synced. The format is identical to Git's.

  These files are always ignored:
    • .DS_Store
    • .gadget
    • .git
    • node_modules

  Note:
    • Sync only works with your development environment
    • Avoid deleting/moving all your files while sync is running
    • Gadget only supports Yarn v1 for dependency installation

EXAMPLE
  $ ggt sync ~/gadget/example --app example

    App         example
    Editor      https://example.gadget.app/edit
    Playground  https://example.gadget.app/api/graphql/playground
    Docs        https://docs.gadget.dev/api/example

    Endpoints
      • https://example.gadget.app
      • https://example--development.gadget.app

    Watching for file changes... Press Ctrl+C to stop

    → Sent 09:06:25 AM
    routes/GET-hello.js  + created

    → Sent 09:06:49 AM
    routes/GET-hello.js  ± updated

    ← Received 09:06:54 AM
    routes/GET-hello.js  ± updated

    ← Received 09:06:56 AM
    routes/GET-hello.js  - deleted
    ^C Stopping... press Ctrl+C again to force

    Goodbye!
"
`;

exports[`root > when version is given > prints the usage when --help is passed 1`] = `
"Print the version of ggt

USAGE
  ggt version

EXAMPLES
  $ ggt version
    1.2.3
"
`;

exports[`root > when version is given > prints the usage when -h is passed 1`] = `
"Print the version of ggt

USAGE
  ggt version

EXAMPLES
  $ ggt version
    1.2.3
"
`;

exports[`root > when whoami is given > prints the usage when --help is passed 1`] = `
"Show the name and email address of the currently logged in user

USAGE
  ggt whoami

EXAMPLES
  $ ggt whoami
    You are logged in as Jane Doe (jane@example.com)
"
`;

exports[`root > when whoami is given > prints the usage when -h is passed 1`] = `
"Show the name and email address of the currently logged in user

USAGE
  ggt whoami

EXAMPLES
  $ ggt whoami
    You are logged in as Jane Doe (jane@example.com)
"
`;
