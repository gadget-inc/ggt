"""
======================================================
THIS IS A GENERATED FILE! DO NOT EDIT IT MANUALLY!

This is copied from the gadget repository at packages/api/src/__generated__/edit.graphql
We manually copy in new versions when we need to change it.
======================================================
"""

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type APIUpgradeConvergePlanResult {
  items: [JSON!]!
  success: Boolean!
}

type AccessToken {
  createdAt: DateTime!
  creator: PlatformAccessTokenUser!
  id: String!
  name: String!
  tokenPrefix: String!
}

type AddApplicationTagResult {
  reason: String
  success: Boolean!
}

type AddUserTagResult {
  reason: String
  success: Boolean!
}

type AppDomain {
  environmentType: String!
  host: String!
  isPrimary: Boolean!
}

type BackgroundAction {
  actionApiIdentifier: String!
  attempts: [BackgroundActionAttempt!]!
  cancelledAt: DateTime
  createdDate: DateTime!
  id: String!
  lastAttemptFinishedAt: DateTime
  lastAttemptStartedAt: DateTime
  lastRestartedAt: DateTime
  nextAttemptStartsAfter: DateTime
  payload: JSON!
  priority: String!
  queue: String
  result: JSON
  retryPolicy: JSON!
  state: BackgroundActionState!
  type: String!
}

type BackgroundActionAttempt {
  attemptNumber: Int!
  createdDate: DateTime
  details: JSON!
  failureReason: JSON
  failureSummary: String
  finishedDate: DateTime
  id: String!
  startedDate: DateTime
  state: BackgroundActionAttemptState!
}

enum BackgroundActionAttemptState {
  FAILED
  RUNNING
  SUCCEEDED
}

type BackgroundActionBulkResult {
  failedCount: Int!
  successCount: Int!
}

type BackgroundActionConnection {
  nodes: [BackgroundAction!]!
  pageInfo: OffsetPageInfo!
}

input BackgroundActionFilter {
  inState: [BackgroundActionState!]
  priority: String
  search: String
}

enum BackgroundActionState {
  CANCELLED
  COMPLETED
  FAILED
  RETRYING
  RUNNING
  SCHEDULED
  WAITING
}

type ChangeAppDomainResult {
  onlyValidate: Boolean
  reason: String
  success: Boolean!
}

type ChangeEnvironmentSlugResult {
  onlyValidate: Boolean
  reason: String
  success: Boolean!
}

type ContributorResult {
  email: String!
  isOwner: Boolean!
  isPending: Boolean!
}

input CreateModelFieldsInput {
  fieldType: String!
  name: String!
}

input CreateModelInput {
  fields: [CreateModelFieldsInput!]!
  path: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DeleteAppStatusResult {
  isNotCreator: Boolean
  isNotOwner: Boolean
  success: Boolean!
}

type EnableFrontendResult {
  reason: String
  success: Boolean!
}

type Environment {
  id: String!
  lastUserEditDate: DateTime!
  name: String!
  slug: String!
  status: EnvironmentStatus!
  type: EnvironmentType!
}

input EnvironmentInput {
  slug: String!
  sourceSlug: String
}

type EnvironmentPatchResult {
  success: Boolean!
}

type EnvironmentPublishResult {
  success: Boolean!
}

enum EnvironmentStatus {
  ACTIVE
  FATAL_ERROR
  PAUSED
  PENDING
}

type EnvironmentSubscriptionResult {
  patches: [JSON!]!
}

input EnvironmentTreeClientId {
  clientType: String!
  id: String!
}

enum EnvironmentType {
  DEVELOPMENT
  PRODUCTION
  TEST
}

type FileSyncChangedEvent {
  content: String!
  encoding: FileSyncEncoding!
  mode: Float!
  path: String!
}

input FileSyncChangedEventInput {
  content: String!
  encoding: FileSyncEncoding
  mode: Float!
  oldPath: String
  path: String!
}

type FileSyncComparisonHashes {
  filesVersionHashes: FileSyncHashes!
  latestFilesVersionHashes: FileSyncHashes!
}

type FileSyncDeletedEvent {
  path: String!
}

input FileSyncDeletedEventInput {
  path: String!
}

enum FileSyncEncoding {
  base64
  utf8
}

type FileSyncFile {
  content: String!
  encoding: FileSyncEncoding!
  mode: Float!
  path: String!
}

type FileSyncFiles {
  files: [FileSyncFile!]!
  filesVersion: String!
}

type FileSyncHashes {
  filesVersion: String!
  hashes: JSON!
}

type GadgetRole {
  key: String!
  name: String!
  order: Int!
  selectable: Boolean!
}

type GadgetV1MigrationEligibilityResult {
  eligible: Boolean!
  reason: String
}

type GeneratePlatformAccessTokenResult {
  createdAt: DateTime!
  creator: PlatformAccessTokenUser!
  id: String!
  name: String!
  token: String!
}

type IdentifySupportConversationResult {
  identificationEmail: String!
  identificationToken: String!
}

scalar JSON

type LogSearchResult {
  data: JSON!
  status: String!
}

type MigrateAACResult {
  reason: String
  success: Boolean!
}

type MigrateEnvironmentsResult {
  success: Boolean!
}

type MigrateGadgetV1Result {
  installDependenciesOperationKey: String
  reason: String
  success: Boolean!
}

type MigrateGadgetV1Status {
  inProgress: Boolean!
  progress: String
  progressDetails: MigrateGadgetV1StatusProgressDetails
  success: Boolean!
}

type MigrateGadgetV1StatusProgressDetails {
  current: Int!
  total: Int!
}

enum ModelExportFormat {
  CSV
  NDJSON
}

type Mutation {
  addApplicationTag(tag: String!): AddApplicationTagResult
  addUserTag(replaceMatches: [String!], tag: String!): AddUserTagResult
  bulkCancelBackgroundActions(filter: BackgroundActionFilter!): BackgroundActionBulkResult!
  bulkDeleteBackgroundActions(filter: BackgroundActionFilter!): BackgroundActionBulkResult!
  bulkStartNextBackgroundActionAttemptsNow(filter: BackgroundActionFilter!): BackgroundActionBulkResult!
  cancelBackgroundAction(id: String!): BackgroundAction!
  changeAppDomain(newSubdomain: String!, onlyValidate: Boolean): ChangeAppDomainResult
  changeEnvironmentSlug(newSlug: String!, onlyValidate: Boolean): ChangeEnvironmentSlugResult
  convergePackages: Boolean!
  createAction(path: String!): RemoteFileSyncEvents!
  createEnvironment(environment: EnvironmentInput!): Environment!
  createModel(fields: [CreateModelFieldsInput!], path: String!): RemoteFileSyncEvents!
  createModelFields(fields: [CreateModelFieldsInput!]!, path: String!): RemoteFileSyncEvents!
  createRoute(method: String!, path: String!): RemoteFileSyncEvents!
  deleteApp(onlyProduction: Boolean): DeleteAppStatusResult
  deleteBackgroundAction(id: String!): Boolean!
  deleteEnvironment(slug: String!): Boolean!
  deletePlatformAccessTokens(tokens: [String!]!): Boolean!
  enableFrontend(hasShopifyConnection: Boolean!): EnableFrontendResult @deprecated(reason: "enabling frontends on legacy apps is no longer supported")
  exportModelData(filterSort: JSON, format: ModelExportFormat, modelApiIdentifier: String!, selection: [String!]): Boolean!
  gadgetV1MigrationEligibility: GadgetV1MigrationEligibilityResult
  generatePlatformAccessToken(name: String!): GeneratePlatformAccessTokenResult!
  migrateAAC: MigrateAACResult
  migrateEnvironments(existingToProduction: Boolean!): MigrateEnvironmentsResult @deprecated(reason: "legacy environments are no longer supported")
  migrateGadgetV1: MigrateGadgetV1Result
  patchEnvironmentTree(clientID: EnvironmentTreeClientId!, patches: [JSON!]!, txID: String): EnvironmentPatchResult
  publish: EnvironmentPublishResult
  publishFileSyncEvents(input: PublishFileSyncEventsInput!): PublishFileSyncEventsResult!
  refreshScopes(appConfigKey: String!, connectionKey: String!, shopId: String!): RefreshScopesResult
  registerWebhooks(connectionKey: String!, keepExtraTopics: Boolean, modelKeys: [String!], shopIds: [String!]!): RegisterWebhooksResult
  removeContributor(email: String!, isInvitation: Boolean!): RemoveContributorResult @deprecated(reason: "use team")
  sendAppInvitation(email: String, emails: [String!], resend: Boolean): SendAppInvitationResult @deprecated(reason: "app invitations are no longer supported")
  setFrameworkVersion(constraint: String!): SetFrameworkVersionResult!
  startLogsExport(end: DateTime, query: String!, start: DateTime!): Boolean!
  startNextBackgroundActionAttemptNow(id: String!): BackgroundAction!
  syncToWebflow: Boolean!
  triggerRunShopifySync(shopIds: [String!]!): TriggerRunShopifySyncResult
  uninstallShop(shopId: String!): UninstallShopResult
  unregisterWebhooks(apiKeys: [String!], connectionKey: String!, modelKeys: [String!]): UnregisterWebhooksResult
  updatePlatformAccessTokens(tokens: [PlatformAccessTokenInput!]!): [AccessToken!]!
  uploadFiles(files: [UploadFile!]!): UploadFilesResult!
  uploadTemplateAsset(file: Upload!): UploadTemplateAssetResult!
}

type OffsetPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  page: Int!
  total: Int!
  """
  If the total is less than the real total, this will be true.
  
  Can be used, for example, to show a "100+" in the UI.
  """
  totalIncomplete: Boolean!
}

input PlatformAccessTokenInput {
  id: String!
  name: String!
}

type PlatformAccessTokenUser {
  email: String!
  id: String!
  name: String
}

type Problem {
  level: String!
  message: String!
  path: String!
  type: String!
}

input PublishFileSyncEventsInput {
  changed: [FileSyncChangedEventInput!]!
  deleted: [FileSyncDeletedEventInput!]!
  expectedRemoteFilesVersion: String!
}

type PublishFileSyncEventsResult {
  problems: [Problem!]!
  remoteFilesVersion: String!
}

type PublishIssue {
  message: String!
  node: PublishIssueNode
  nodeLabels: [PublishIssueNodeLabel]
  severity: String!
}

type PublishIssueNode {
  apiIdentifier: String
  fieldType: String
  key: String!
  name: String
  parentApiIdentifier: String
  parentKey: String
  type: String!
}

type PublishIssueNodeLabel {
  identifier: String
  type: String
}

type PublishStatus {
  code: String
  message: String
  output: String
}

type PublishStatusState {
  issues: [PublishIssue!]!
  progress: String!
  publishStarted: Boolean!
  remoteFilesVersion: String!
  status: PublishStatus
}

type Query {
  apiUpgradeConvergePlan(currentVersion: String!, targetVersion: String!): APIUpgradeConvergePlanResult
  appDomains: [AppDomain!]!
  backgroundAction(id: String!): BackgroundAction
  backgroundActions(filter: BackgroundActionFilter, page: Int): BackgroundActionConnection!
  currentUser: User!
  environmentTreeChildKeys(path: String!): [String!]!
  environmentTreePath(hydrateChildrenGlobs: [String!], path: String!): JSON
  environments: [Environment!]!
  fileSyncComparisonHashes(filesVersion: String!): FileSyncComparisonHashes!
  fileSyncFiles(encoding: FileSyncEncoding, filesVersion: String, paths: [String!]!): FileSyncFiles!
  fileSyncHashes(filesVersion: String): FileSyncHashes!
  identifySupportConversation: IdentifySupportConversationResult
  initialSnapshot: JSON!
  listContributors: [ContributorResult!]! @deprecated(reason: "use team")
  logsSearch(direction: String, end: DateTime, limit: Int, query: String!, start: DateTime, step: Int): LogSearchResult!
  platformAccessTokens: [AccessToken!]!
  publishIssues: [PublishIssue!]!
  remoteFilesVersion: String!
  roles: [GadgetRole!]!
  runTestSupportFunction: JSON
  team: TeamResult!
  typesManifest(dependenciesHash: String!, environmentStatus: String): TypesManifest!
}

type RefreshScopesResult {
  success: Boolean!
}

type RegisterWebhooksResult {
  success: Boolean!
}

type RemoteFileSyncEvents {
  changed: [FileSyncChangedEvent!]!
  deleted: [FileSyncDeletedEvent!]!
  remoteFilesVersion: String!
}

type RemoveContributorResult {
  reason: String
  success: Boolean!
}

type SendAppInvitationResult {
  reason: String
  success: Boolean!
}

type SetFrameworkVersionResult {
  installDependenciesOperationKey: String
}

type Subscription {
  environmentTreePathPatches(clientID: EnvironmentTreeClientId!, path: String!): EnvironmentSubscriptionResult
  logsSearch(limit: Int, query: String!, start: DateTime): LogSearchResult!
  migrateGadgetV1Status: MigrateGadgetV1Status
  openBackgroundActions: Int!
  publishStatus(allowCharges: Boolean, force: Boolean, localFilesVersion: String!): PublishStatusState
  remoteFileSyncEvents(encoding: FileSyncEncoding, localFilesVersion: String!): RemoteFileSyncEvents!
  reportClientPresence(clientID: EnvironmentTreeClientId!): Boolean
  typesManifestStream: TypesManifest!
}

type TeamEntitlements {
  openAICredits: Boolean
}

type TeamMember {
  contributesToApp: Boolean!
  email: String!
}

type TeamResult {
  availableSeats: Int
  canPublish: Boolean!
  costPerApplication: String
  costPerSeat: String
  includedApplications: Int
  includedApplicationsRemaining: Int
  maxApplications: Int
  teamEntitlements: TeamEntitlements!
  teamMembers: [TeamMember!]!
}

type TriggerRunShopifySyncResult {
  failedShopIds: [String!]!
  success: Boolean!
  successfulShopIds: [String!]!
}

type TypeManifestEntry {
  declaration: String!
  path: String!
}

type TypesManifest {
  cdn: [String!]!
  dependenciesHash: String!
  entries: [TypeManifestEntry!]!
  environmentVersion: Int!
}

type UninstallShopResult {
  reason: String
  success: Boolean!
}

type UnregisterWebhooksResult {
  success: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFile {
  file: Upload!
  path: String!
}

type UploadFilesResult {
  success: Boolean!
}

type UploadTemplateAssetResult {
  success: Boolean!
  url: String
}

type User {
  email: String!
  name: String
}