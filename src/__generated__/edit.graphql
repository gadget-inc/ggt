"""
======================================================
THIS IS A GENERATED FILE! DO NOT EDIT IT MANUALLY!

You can find the original file in the gadget repository
======================================================
"""

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type APIUpgradeConvergePlanResult {
  items: [JSON!]!
  success: Boolean!
}

type ChangeAppDomainResult {
  onlyValidate: Boolean
  reason: String
  success: Boolean!
}

type ContributorResult {
  email: String!
  isOwner: Boolean!
  isPending: Boolean!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DeleteAppStatusResult {
  isNotCreator: Boolean
  isNotOwner: Boolean
  success: Boolean!
}

type EnableFrontendResult {
  reason: String
  success: Boolean!
}

type EnvironmentPatchResult {
  success: Boolean!
}

type EnvironmentPublishResult {
  success: Boolean!
}

type EnvironmentSubscriptionResult {
  patches: [JSON!]!
}

input EnvironmentTreeClientId {
  clientType: String!
  id: String!
}

type FileSyncChangedEvent {
  content: String!
  encoding: FileSyncEncoding!
  mode: Float!
  path: String!
}

input FileSyncChangedEventInput {
  content: String!
  encoding: FileSyncEncoding
  mode: Float!
  oldPath: String
  path: String!
}

type FileSyncDeletedEvent {
  path: String!
}

input FileSyncDeletedEventInput {
  path: String!
}

enum FileSyncEncoding {
  base64
  utf8
}

type GadgetRole {
  key: String!
  name: String!
  order: Int!
  selectable: Boolean!
}

type IdentifySupportConversationResult {
  identificationEmail: String!
  identificationToken: String!
}

scalar JSON

type LogSearchResult {
  data: JSON!
  status: String!
}

type MigrateEnvironmentsResult {
  success: Boolean!
}

type Mutation {
  changeAppDomain(newSubdomain: String!, onlyValidate: Boolean): ChangeAppDomainResult
  deleteApp: DeleteAppStatusResult
  enableFrontend(hasShopifyConnection: Boolean!): EnableFrontendResult
  migrateEnvironments(existingToProduction: Boolean!): MigrateEnvironmentsResult
  patchEnvironmentTree(clientID: EnvironmentTreeClientId!, patches: [JSON!]!): EnvironmentPatchResult
  publish: EnvironmentPublishResult
  publishFileSyncEvents(input: PublishFileSyncEventsInput!): PublishFileSyncEventsResult!
  refreshScopes(appConfigKey: String!, connectionKey: String!, shopId: String!): RefreshScopesResult
  registerWebhooks(connectionKey: String!, keepExtraTopics: Boolean, modelKeys: [String!], shopIds: [String!]!): RegisterWebhooksResult
  removeContributor(email: String!, isInvitation: Boolean!): RemoveContributorResult
  sendAppInvitation(email: String, emails: [String!], resend: Boolean): SendAppInvitationResult
  unregisterWebhooks(apiKeys: [String!], connectionKey: String!, modelKeys: [String!]): UnregisterWebhooksResult
  uploadFiles(files: [UploadFile!]!): UploadFilesResult!
}

input PublishFileSyncEventsInput {
  changed: [FileSyncChangedEventInput!]!
  deleted: [FileSyncDeletedEventInput!]!
  expectedRemoteFilesVersion: String!
}

type PublishFileSyncEventsResult {
  remoteFilesVersion: String!
}

type Query {
  apiUpgradeConvergePlan(currentVersion: String!, targetVersion: String!): APIUpgradeConvergePlanResult
  currentUser: User!
  environmentTreeChildKeys(path: String!): [String!]!
  environmentTreePath(hydrateChildrenGlobs: [String!], path: String!): JSON
  identifySupportConversation: IdentifySupportConversationResult
  listContributors: [ContributorResult!]!
  logsSearch(direction: String, end: DateTime, limit: Int, query: String!, start: DateTime, step: Int): LogSearchResult!
  remoteFilesVersion: String!
  roles: [GadgetRole!]!
  runTestSupportFunction: JSON
  team: TeamResult!
  typesManifest(dependenciesHash: String!): TypesManifest!
}

type RefreshScopesResult {
  success: Boolean!
}

type RegisterWebhooksResult {
  success: Boolean!
}

type RemoteFileSyncEvents {
  changed: [FileSyncChangedEvent!]!
  deleted: [FileSyncDeletedEvent!]!
  remoteFilesVersion: String!
}

type RemoveContributorResult {
  reason: String
  success: Boolean!
}

type SendAppInvitationResult {
  reason: String
  success: Boolean!
}

type Subscription {
  editorActive: Boolean
  environmentTreePathPatches(clientID: EnvironmentTreeClientId!, path: String!): EnvironmentSubscriptionResult
  logsSearch(limit: Int, query: String!, start: DateTime): LogSearchResult!
  remoteFileSyncEvents(encoding: FileSyncEncoding, localFilesVersion: String!): RemoteFileSyncEvents!
  typesManifestStream: TypesManifest!
}

type TeamMember {
  contributesToApp: Boolean!
  email: String!
}

type TeamResult {
  availableSeats: Int
  costPerSeat: String
  teamMembers: [TeamMember!]!
}

type TypeManifestEntry {
  declaration: String!
  path: String!
}

type TypesManifest {
  cdn: [String!]!
  dependenciesHash: String!
  entries: [TypeManifestEntry!]!
  environmentVersion: Int!
}

type UnregisterWebhooksResult {
  success: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadFile {
  file: Upload!
  path: String!
}

type UploadFilesResult {
  success: Boolean!
}

type User {
  email: String!
  name: String
}