{
  "version": 3,
  "sources": ["../src/support.ts"],
  "sourcesContent": ["import type { ActionFunction } from \"@gadgetinc/api-client-core\";\n\n/**\n * Maps the variables passed from a call to the client to the variables the GraphQL API is expecting\n *\n * For actions which accept a model input, the GraphQL API expects the variables to be passed like\n *  id: 123,\n *  widget: { fieldA: \"a\", fieldB: \"b\" },\n *  extraParam: \"C\"\n *\n * For convenience, we allow actions to be invoked like\n *   await api.widget.update(\"123\", {fieldA: \"a\", fieldB: \"b\", extraParam: \"C\"})\n *\n * This function re-nests the model input variables under a key for the model's api identifier, being careful to leave root level params alone.\n **/\nexport function disambiguateActionParams<Action extends ActionFunction<any, any, any, any, any>>(\n  action: Action,\n  idValue: string | undefined,\n  variables: Record<string, any> = {},\n): Record<string, any> {\n  if (action.hasAmbiguousIdentifier) {\n    if (Object.keys(variables).some((key) => !action.paramOnlyVariables?.includes(key) && key !== action.modelApiIdentifier)) {\n      throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${action.modelApiIdentifier}: { ... } })?`);\n    }\n  }\n\n  let newVariables: Record<string, any>;\n  const idVariable = Object.entries(action.variables).find(([key, value]) => key === \"id\" && value.type === \"GadgetID\");\n\n  if ((action as any).acceptsModelInput || action.hasCreateOrUpdateEffect) {\n    if (\n      (action.modelApiIdentifier in variables &&\n      typeof variables[action.modelApiIdentifier] === \"object\" &&\n      variables[action.modelApiIdentifier] !== null) || !action.variables[action.modelApiIdentifier]\n    ) {\n      newVariables = variables;\n    } else {\n      newVariables = {\n        [action.modelApiIdentifier]: {},\n      };\n      for (const [key, value] of Object.entries(variables)) {\n        if (action.paramOnlyVariables?.includes(key)) {\n          newVariables[key] = value;\n        } else {\n          if (idVariable && key === idVariable[0]) {\n            newVariables[\"id\"] = value;\n          } else {\n            newVariables[action.modelApiIdentifier][key] = value;\n          }\n        }\n      }\n    }\n  } else {\n    newVariables = variables;\n  }\n\n  newVariables[\"id\"] ??= idValue as any;\n\n  return newVariables;\n}\n"],
  "mappings": "AAeO,SAAS,yBACd,QACA,SACA,YAAiC,CAAC,GACb;AACrB,MAAI,OAAO,wBAAwB;AACjC,QAAI,OAAO,KAAK,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,OAAO,oBAAoB,SAAS,GAAG,KAAK,QAAQ,OAAO,kBAAkB,GAAG;AACxH,YAAM,MAAM,gEAAgE,OAAO,iCAAiC;AAAA,IACtH;AAAA,EACF;AAEA,MAAI;AACJ,QAAM,aAAa,OAAO,QAAQ,OAAO,SAAS,EAAE,KAAK,CAAC,CAAC,KAAK,KAAK,MAAM,QAAQ,QAAQ,MAAM,SAAS,UAAU;AAEpH,MAAK,OAAe,qBAAqB,OAAO,yBAAyB;AACvE,QACG,OAAO,sBAAsB,aAC9B,OAAO,UAAU,OAAO,kBAAkB,MAAM,YAChD,UAAU,OAAO,kBAAkB,MAAM,QAAS,CAAC,OAAO,UAAU,OAAO,kBAAkB,GAC7F;AACA,qBAAe;AAAA,IACjB,OAAO;AACL,qBAAe;AAAA,QACb,CAAC,OAAO,kBAAkB,GAAG,CAAC;AAAA,MAChC;AACA,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,SAAS,GAAG;AACpD,YAAI,OAAO,oBAAoB,SAAS,GAAG,GAAG;AAC5C,uBAAa,GAAG,IAAI;AAAA,QACtB,OAAO;AACL,cAAI,cAAc,QAAQ,WAAW,CAAC,GAAG;AACvC,yBAAa,IAAI,IAAI;AAAA,UACvB,OAAO;AACL,yBAAa,OAAO,kBAAkB,EAAE,GAAG,IAAI;AAAA,UACjD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,OAAO;AACL,mBAAe;AAAA,EACjB;AAEA,8CAAuB;AAEvB,SAAO;AACT;",
  "names": []
}
